// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, Squeegee, URL, cheerio, request,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  request = require('request');

  cheerio = require('cheerio');

  EventEmitter = require('events').EventEmitter;

  URL = require('url');

  Squeegee = (function(_super) {
    __extends(Squeegee, _super);

    function Squeegee(url) {
      this.url = url;
    }

    Squeegee.prototype.fetch = function() {
      console.log("Making request to " + this.url);
      return request({
        uri: this.url
      }, (function(_this) {
        return function(err, res, body) {
          if (!err) {
            if (res.statusCode === 200) {
              console.log("got data from " + _this.url);
              _this.document = body;
              _this.parsedDocument = cheerio.load(body);
              return _this.parse();
            } else {
              return _this.emit('error', "Got non-200 status code: " + res.statusCode);
            }
          } else {
            return _this.emit('error', err);
          }
        };
      })(this));
    };

    Squeegee.prototype.parse = function() {
      console.log("parsing...");
      this.title = this.parsedDocument('title').text();
      this.ogTitle = this.parsedDocument("meta[property='og:title']").attr("content");
      this.links = this.parsedDocument('a').map((function(_this) {
        return function(i, elem) {
          return _this.parsedDocument(elem).attr('href');
        };
      })(this));
      this.metaDescription = this.parsedDocument("meta[name='description']").attr("content");
      this.parsedDocument('p').each((function(_this) {
        return function(i, elem) {
          var text;
          text = _this.parsedDocument(elem).text();
          if (text.length > 140) {
            return _this.firstParagraph = text;
          }
        };
      })(this));
      this.description = this.metaDescription ? this.metaDescription : this.firstParagraph;
      this.image = this.parsedDocument("meta[property='og:image']").attr("content");
      this.icon = URL.resolve(this.url, '/favicon.ico');
      return this.emit('parse');
    };

    return Squeegee;

  })(EventEmitter);

  module.exports = Squeegee;

}).call(this);
